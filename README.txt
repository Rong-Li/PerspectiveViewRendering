
   In order to render lines and polygons in 3D with perspective view, a method is created to find the inverse of the transformation which places the camera.
    The vertices that are used to render the polygon will all be multiplied by this inverse of transformation. Multiplying the points to CameraToScreen transformation which conducted by multiplying the simple metric and the projectionToScreen matrix. These methods do good job to successfully render the fist page. Clipping problem has occurred starting at second page, where a clipping of Z axis are needed. Writing a clipper class to clip Z which implements well and finished second page. Starting from pageC, polygons are need to be rendered under the depthcueDrawable, so I modified my depthcueDrawable, it is not enough to render well. I found interpolating between 1/z is the key, so I passed in 1/z to fillpolygonRenderer instead of z. Then do another calculation of 1/z in setpixel in depthdrawable.
    I also modified fillPolygonRender by passing correct Shader, which initialized by the ambient light. Using Lambda function, I multiplied ambient light shader to each pixel I\'92m trying to draw. Along with some modification in Simp interpreter, rest of simp pages are able to draw, it takes too long to draw and impossible to draw some polygon that is with very large or small magnitude of x and y.    
    I added X and Y clipper to my clipper class, which does similar thing with Z clipper. There were bugs occurs after X and Y clipping. So managed my simp interpreter to have vertices be multiplied by CTM and then clipped by Z, multiplied simple perspective metrics right after. Before multiplying the projectToScreen matrix, I clipped X and Y with perspective of the limits set by camera command. 
    ProjectionToScreen is applied. For ObjectRead, I simply did lots of function calls of simpInterpreter, which were modified as statics. Some features like \'93normal\'94 and \'93texture\'94 I haven\'92t have done yet. For pageJ, I have found a object file that someone else did form turbosquid.com. There were lots of debugging to get satisfied graphs. The specifications of 3D perspective view rendering are all satisfied. 
